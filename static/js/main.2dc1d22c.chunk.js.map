{"version":3,"sources":["wasm/wasm-loader.ts","store/web-worker-demo/worker.ts","library/utils/deferred.ts","wasm lazy groupOptions: {} namespace object","store/web-worker-demo/worker-caller.ts","store/web-worker-demo/slice.ts","store/reducers.ts","store/configure-store.ts","components/title-bar-and-content.tsx","components/wasm-test-button.tsx","store/dispatch-hooks.ts","components/web-worker-demo-view.tsx","components/app-impl.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["loadUnsafe","a","undefined","process","JEST_WORKER_ID","jest","path","resolve","__dirname","loadWasmLib","wasm","console","log","init","globalDeferredLoad","makeDeferred","globalState","isLoading","failedToLoad","promise","getGlobalWasmState","getWasmLibIfLoaded","loadWasm","loadAsyncHelper","module","exports","Worker","deferred","Promise","webpackEmptyAsyncContext","req","then","e","Error","code","keys","id","runWebWorker","input","worker","workerObj","Comlink","processData","createAsyncThunk","series","webWorkerDemoSlice","createSlice","name","initialState","isGenerating","processedData","reducers","setInput","state","action","payload","extraReducers","builder","addCase","pending","rejected","fulfilled","reducer","actions","rootReducer","combineReducers","webWorkerDemo","webWorkerDemoReducer","configureStore","toolkitConfigure","middleware","getDefaultMiddleware","serializableCheck","immutableCheck","devTools","useStyles","makeStyles","theme","createStyles","root","display","appBar","breakpoints","up","width","title","flexGrow","toolbar","mixins","content","padding","spacing","TitleBarAndContent","props","children","classes","className","CssBaseline","AppBar","position","Toolbar","Typography","variant","noWrap","WasmTestButton","useState","wasmGreeting","setWasmGreeting","wasmLoaded","setWasmLoaded","useEffect","waitForWasm","Box","flexDirection","alignItems","Button","color","disabled","onClick","get_greeting","textToDisplay","useAppDispatch","useDispatch","WebWorkerDemoView","selector","s","output","generateRequired","useSelector","dispatch","dispatchSetInput","useCallback","useDispatchCallback","TextField","style","label","value","onChange","target","marginTop","height","LinearProgress","createMuiTheme","palette","primary","main","secondary","AppImpl","ThemeProvider","store","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.2dc1d22c.chunk.js","sourcesContent":["import path from 'path';\nimport { makeDeferred } from 'library/utils/deferred';\n\nexport type WasmLibT = typeof import('rust-wasm-lib');\n\nasync function loadUnsafe(): Promise<WasmLibT> {\n\tconst isTest = process.env.JEST_WORKER_ID !== undefined || typeof jest !== 'undefined';\n\n\t// If running test in jest we have to load the node version of the package\n\tif (isTest)\n\t\treturn await import(path.resolve(__dirname, '../../rust-wasm/pkg-node', 'rust_wasm_lib'));\n\treturn await import('rust-wasm-lib');\n}\n\n// Allows the wasm library to be loaded and awaited\nexport async function loadWasmLib() {\n\tlet wasm: WasmLibT | undefined;\n\n\ttry {\n\t\twasm = await loadUnsafe();\n\n\t\tconsole.log('successfully loaded rust-wasm-lib');\n\n\t\twasm?.init();\n\t} catch {\n\t\tconsole.log('failed to load rust-wasm-lib');\n\t}\n\n\treturn wasm;\n}\n\nconst globalDeferredLoad = makeDeferred();\n\nconst globalState = {\n\tisLoading: false,\n\tfailedToLoad: false,\n\tpromise: globalDeferredLoad.promise,\n};\n\nexport function getGlobalWasmState() {\n\treturn { ...globalState };\n}\n\nfunction loadAsyncHelper() {\n\tlet wasm: WasmLibT | undefined;\n\n\tasync function loadWasm() {\n\t\tglobalState.isLoading = true;\n\n\t\twasm = await loadWasmLib();\n\n\t\tglobalDeferredLoad.resolve();\n\n\t\tglobalState.failedToLoad = wasm === undefined;\n\t\tglobalState.isLoading = false;\n\t}\n\n\tloadWasm();\n\n\treturn () => wasm;\n}\n\n// A function that will return the wasm lib if loaded globally or return undefined if not\nexport const getWasmLibIfLoaded = loadAsyncHelper();\n","module.exports = function() {\n  return new Worker(__webpack_public_path__ + \"eb6465126593f7b766e8.worker.js\");\n};","// Creates a Promise<void> that will block until resolve is called\nexport function makeDeferred() {\n\ttype Deferred = { promise: Promise<void>; resolve: () => void };\n\tlet deferred: Partial<Deferred> = {};\n\tdeferred.promise = new Promise((resolve) => {\n\t\tdeferred.resolve = resolve;\n\t});\n\treturn deferred as Deferred;\n}\n","function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = 83;","import * as Comlink from 'comlink';\n/* eslint-disable import/no-webpack-loader-syntax */\n// @ts-ignore\nimport Worker from 'worker-loader!./worker';\nimport { WorkerType } from './worker';\n\nexport async function runWebWorker(input: string) {\n\tconst worker = Worker();\n\tconst workerObj = Comlink.wrap<WorkerType>(worker);\n\treturn workerObj.runWebWorker(input);\n}\n","import { createSlice, PayloadAction, createAsyncThunk } from '@reduxjs/toolkit';\nimport { AwaitedType } from 'library/utils/type-utils';\nimport { runWebWorker } from './worker-caller';\n\ntype WorkerResultT = AwaitedType<ReturnType<typeof runWebWorker>>;\ntype WorkerInput = string;\n\nexport type WebWorkerDemoState = Readonly<{\n\tinput: WorkerInput;\n\tisGenerating: boolean;\n\tprocessedData: { series: WorkerResultT; input?: WorkerInput };\n}>;\n\nconst defaultState: WebWorkerDemoState = {\n\tinput: '',\n\tisGenerating: false,\n\tprocessedData: {\n\t\tseries: '',\n\t},\n};\n\nexport function dataProcessingRequired(state: WebWorkerDemoState) {\n\tif (state.processedData.input === undefined) return true;\n\n\treturn state.processedData.input !== state.input;\n}\n\nexport const processData = createAsyncThunk(\n\t'webWorkerDemo/runWorker',\n\tasync (input: WorkerInput) => {\n\t\tconst series = await runWebWorker(input);\n\t\treturn {\n\t\t\tseries,\n\t\t\tinput,\n\t\t};\n\t}\n);\n\nconst webWorkerDemoSlice = createSlice({\n\tname: 'webWorkerDemo',\n\tinitialState: defaultState,\n\treducers: {\n\t\tsetInput(state, action: PayloadAction<WorkerInput>) {\n\t\t\tstate.input = action.payload;\n\t\t},\n\t},\n\textraReducers: (builder) => {\n\t\tbuilder.addCase(processData.pending, (state) => {\n\t\t\tstate.isGenerating = true;\n\t\t});\n\t\tbuilder.addCase(processData.rejected, (state) => {\n\t\t\tstate.isGenerating = false;\n\t\t});\n\t\tbuilder.addCase(processData.fulfilled, (state, { payload }) => {\n\t\t\tstate.processedData = payload;\n\t\t\tstate.isGenerating = false;\n\t\t});\n\t},\n});\n\nexport const { reducer, actions } = webWorkerDemoSlice;\n\nexport const { setInput } = actions;\n","import { combineReducers } from '@reduxjs/toolkit';\nimport { useSelector } from 'react-redux';\n\nimport { WebWorkerDemoState, reducer as webWorkerDemoReducer } from './web-worker-demo/slice';\n\nexport const rootReducer = combineReducers({\n\twebWorkerDemo: webWorkerDemoReducer,\n});\n\nexport type RootState = ReturnType<typeof rootReducer>;\n\nexport const useRootSelector = <T extends unknown>(selector: (s: RootState) => T) =>\n\tuseSelector<RootState, T>((s) => selector(s));\n\nexport const useWebWorkerDemoSelector = <T extends unknown>(\n\tselector: (s: WebWorkerDemoState) => T\n) => useSelector<RootState, T>((s) => selector(s.webWorkerDemo));\n","import { configureStore as toolkitConfigure, getDefaultMiddleware } from '@reduxjs/toolkit';\nimport { rootReducer } from './reducers';\n\nconst makeReducer = () => rootReducer;\n\nconst configureStore = () => {\n\tconst store = toolkitConfigure({\n\t\treducer: makeReducer(),\n\t\tmiddleware: getDefaultMiddleware({\n\t\t\tserializableCheck: false,\n\t\t\timmutableCheck: false,\n\t\t}),\n\t\tdevTools: true,\n\t});\n\n\tif (process.env.NODE_ENV !== 'production') {\n\t\tif (module.hot) {\n\t\t\tmodule.hot.accept('./reducers', () => {\n\t\t\t\tstore.replaceReducer(makeReducer());\n\t\t\t});\n\t\t}\n\t}\n\n\treturn store;\n};\n\nexport default configureStore;\n","import React from 'react';\n\nimport AppBar from '@material-ui/core/AppBar';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\nimport { makeStyles, Theme, createStyles } from '@material-ui/core/styles';\n\nconst useStyles = makeStyles((theme: Theme) =>\n\tcreateStyles({\n\t\troot: {\n\t\t\tdisplay: 'flex',\n\t\t},\n\t\tappBar: {\n\t\t\t[theme.breakpoints.up('lg')]: {\n\t\t\t\twidth: `100%`,\n\t\t\t},\n\t\t},\n\t\ttitle: {\n\t\t\tflexGrow: 1,\n\t\t},\n\t\ttoolbar: theme.mixins.toolbar,\n\t\tcontent: {\n\t\t\tflexGrow: 1,\n\t\t\tpadding: theme.spacing(3),\n\t\t\twidth: '100%',\n\t\t},\n\t})\n);\n\nexport default function TitleBarAndContent<T>(props: React.PropsWithChildren<{}>) {\n\tconst { children } = props;\n\n\tconst classes = useStyles();\n\n\treturn (\n\t\t<div className={classes.root}>\n\t\t\t<CssBaseline />\n\t\t\t<AppBar position=\"fixed\" className={classes.appBar}>\n\t\t\t\t<Toolbar>\n\t\t\t\t\t<Typography variant=\"h6\" className={classes.title} noWrap>\n\t\t\t\t\t\treact-ts-wasm-template\n\t\t\t\t\t</Typography>\n\t\t\t\t</Toolbar>\n\t\t\t</AppBar>\n\t\t\t<main className={classes.content}>\n\t\t\t\t<div className={classes.toolbar} />\n\t\t\t\t{children}\n\t\t\t</main>\n\t\t</div>\n\t);\n}\n","import React, { useState, useEffect } from 'react';\n\nimport Button from '@material-ui/core/Button';\n\nimport { getGlobalWasmState, getWasmLibIfLoaded } from 'wasm/wasm-loader';\nimport { Box } from '@material-ui/core';\n\nexport default function WasmTestButton() {\n\tconst [wasmGreeting, setWasmGreeting] = useState('');\n\tconst [wasmLoaded, setWasmLoaded] = useState<false | true | 'failed'>(false);\n\n\t// Wait for wasm to be loaded\n\tuseEffect(() => {\n\t\tconst waitForWasm = async () => {\n\t\t\tconst { promise } = getGlobalWasmState();\n\t\t\tawait promise;\n\t\t\tconst { failedToLoad } = getGlobalWasmState();\n\t\t\tsetWasmLoaded(failedToLoad ? 'failed' : true);\n\t\t};\n\t\twaitForWasm();\n\t}, []);\n\n\tconst onClick = () => {\n\t\tconst wasm = getWasmLibIfLoaded();\n\t\tif (wasm) {\n\t\t\tsetWasmGreeting(wasm.get_greeting());\n\t\t}\n\t};\n\n\tconst textToDisplay = () => {\n\t\tswitch (wasmLoaded) {\n\t\t\tcase true:\n\t\t\t\treturn wasmGreeting;\n\t\t\tcase false:\n\t\t\t\treturn 'Loading....';\n\t\t\tcase 'failed':\n\t\t\t\treturn 'Failed to load';\n\t\t}\n\t\treturn '';\n\t};\n\n\treturn (\n\t\t<Box display=\"flex\" flexDirection=\"column\" width=\"100%\" alignItems=\"center\">\n\t\t\t<Button variant=\"contained\" color=\"primary\" disabled={wasmLoaded !== true} onClick={onClick}>\n\t\t\t\tGreet WASM\n\t\t\t</Button>\n\t\t\t<h3>{textToDisplay()}</h3>\n\t\t</Box>\n\t);\n}\n","import { useDispatch } from 'react-redux';\nimport { useCallback } from 'react';\nimport { Action } from 'redux';\nimport configureStore from './configure-store';\n\ntype StoreType = ReturnType<typeof configureStore>;\ntype AppDispatch = StoreType['dispatch'];\n\nexport const useAppDispatch = () => useDispatch<AppDispatch>();\n\nexport const useDispatchCallback = <T extends Array<unknown>, ActionT extends Action>(\n\taction: (...args: T) => ActionT\n) => {\n\tconst dispatch = useAppDispatch();\n\treturn useCallback((...args: T) => dispatch(action(...args)), [dispatch, action]);\n};\n","import React, { useEffect } from 'react';\n\nimport TextField from '@material-ui/core/TextField';\nimport LinearProgress from '@material-ui/core/LinearProgress';\nimport { Box } from '@material-ui/core';\n\nimport { useWebWorkerDemoSelector } from 'store/reducers';\nimport { useDispatchCallback, useAppDispatch } from 'store/dispatch-hooks';\nimport { processData, dataProcessingRequired, setInput } from 'store/web-worker-demo/slice';\n\nexport default function WebWorkerDemoView() {\n\tconst { input, output, generateRequired, isGenerating } = useWebWorkerDemoSelector((s) => ({\n\t\tinput: s.input,\n\t\toutput: s.processedData.series,\n\t\tgenerateRequired: dataProcessingRequired(s),\n\t\tisGenerating: s.isGenerating,\n\t}));\n\n\tconst dispatch = useAppDispatch();\n\n\tconst dispatchSetInput = useDispatchCallback(setInput);\n\n\tuseEffect(() => {\n\t\t// Only start generating new intervals when the previous interval generation has completed\n\t\t// This ensures only 1 worker is running at once\n\t\tif (generateRequired && !isGenerating) {\n\t\t\tdispatch(processData(input));\n\t\t}\n\t}, [input, generateRequired, isGenerating, dispatch]);\n\n\tconst textToDisplay = () => {\n\t\treturn output ? 'Calculated hash: ' + output : '';\n\t};\n\n\treturn (\n\t\t<Box display=\"flex\" flexDirection=\"column\" width=\"100%\" alignItems=\"center\">\n\t\t\t<TextField\n\t\t\t\tstyle={{ width: '50%' }}\n\t\t\t\tlabel=\"Input text for web-worker processing\"\n\t\t\t\tvariant=\"filled\"\n\t\t\t\tvalue={input}\n\t\t\t\tonChange={(e) => dispatchSetInput(e.target.value)}\n\t\t\t/>\n\t\t\t<div style={{ marginTop: '10px', height: '10px', width: '50%' }}>\n\t\t\t\t{isGenerating && <LinearProgress />}\n\t\t\t</div>\n\t\t\t<h3>{textToDisplay()}</h3>\n\t\t</Box>\n\t);\n}\n","import React from 'react';\n\nimport { createMuiTheme, ThemeProvider } from '@material-ui/core/styles';\n\nimport TitleBarAndContent from './title-bar-and-content';\nimport WasmTestButton from './wasm-test-button';\nimport WebWorkerDemoView from './web-worker-demo-view';\n\nimport './main.css';\n\nconst palette = {\n\tprimary: { main: '#D1C4E9' },\n\tsecondary: { main: '#FFECB3' },\n};\n\nconst theme = createMuiTheme({\n\tpalette,\n});\n\nexport default function AppImpl() {\n\treturn (\n\t\t<ThemeProvider theme={theme}>\n\t\t\t<TitleBarAndContent>\n\t\t\t\t<WasmTestButton />\n\t\t\t\t<WebWorkerDemoView />\n\t\t\t</TitleBarAndContent>\n\t\t</ThemeProvider>\n\t);\n}\n","import React from 'react';\n\nimport { Provider } from 'react-redux';\n\nimport configureStore from 'store/configure-store';\nimport AppImpl from './components/app-impl';\n\nconst store = configureStore();\n\nconst App = () => (\n\t<Provider store={store}>\n\t\t<AppImpl />\n\t</Provider>\n);\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n\twindow.location.hostname === 'localhost' ||\n\t\t// [::1] is the IPv6 localhost address.\n\t\twindow.location.hostname === '[::1]' ||\n\t\t// 127.0.0.0/8 are considered localhost for IPv4.\n\t\twindow.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\ntype Config = {\n\tonSuccess?: (registration: ServiceWorkerRegistration) => void;\n\tonUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n\tif (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n\t\t// The URL constructor is available in all browsers that support SW.\n\t\tconst publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n\t\tif (publicUrl.origin !== window.location.origin) {\n\t\t\t// Our service worker won't work if PUBLIC_URL is on a different origin\n\t\t\t// from what our page is served on. This might happen if a CDN is used to\n\t\t\t// serve assets; see https://github.com/facebook/create-react-app/issues/2374\n\t\t\treturn;\n\t\t}\n\n\t\twindow.addEventListener('load', () => {\n\t\t\tconst swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n\t\t\tif (isLocalhost) {\n\t\t\t\t// This is running on localhost. Let's check if a service worker still exists or not.\n\t\t\t\tcheckValidServiceWorker(swUrl, config);\n\n\t\t\t\t// Add some additional logging to localhost, pointing developers to the\n\t\t\t\t// service worker/PWA documentation.\n\t\t\t\tnavigator.serviceWorker.ready.then(() => {\n\t\t\t\t\tconsole.log(\n\t\t\t\t\t\t'This web app is being served cache-first by a service ' +\n\t\t\t\t\t\t\t'worker. To learn more, visit https://bit.ly/CRA-PWA'\n\t\t\t\t\t);\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\t// Is not localhost. Just register service worker\n\t\t\t\tregisterValidSW(swUrl, config);\n\t\t\t}\n\t\t});\n\t}\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n\tnavigator.serviceWorker\n\t\t.register(swUrl)\n\t\t.then((registration) => {\n\t\t\tregistration.onupdatefound = () => {\n\t\t\t\tconst installingWorker = registration.installing;\n\t\t\t\tif (installingWorker == null) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tinstallingWorker.onstatechange = () => {\n\t\t\t\t\tif (installingWorker.state === 'installed') {\n\t\t\t\t\t\tif (navigator.serviceWorker.controller) {\n\t\t\t\t\t\t\t// At this point, the updated precached content has been fetched,\n\t\t\t\t\t\t\t// but the previous service worker will still serve the older\n\t\t\t\t\t\t\t// content until all client tabs are closed.\n\t\t\t\t\t\t\tconsole.log(\n\t\t\t\t\t\t\t\t'New content is available and will be used when all ' +\n\t\t\t\t\t\t\t\t\t'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t\t// Execute callback\n\t\t\t\t\t\t\tif (config && config.onUpdate) {\n\t\t\t\t\t\t\t\tconfig.onUpdate(registration);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t// At this point, everything has been precached.\n\t\t\t\t\t\t\t// It's the perfect time to display a\n\t\t\t\t\t\t\t// \"Content is cached for offline use.\" message.\n\t\t\t\t\t\t\tconsole.log('Content is cached for offline use.');\n\n\t\t\t\t\t\t\t// Execute callback\n\t\t\t\t\t\t\tif (config && config.onSuccess) {\n\t\t\t\t\t\t\t\tconfig.onSuccess(registration);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t\t};\n\t\t})\n\t\t.catch((error) => {\n\t\t\tconsole.error('Error during service worker registration:', error);\n\t\t});\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n\t// Check if the service worker can be found. If it can't reload the page.\n\tfetch(swUrl, {\n\t\theaders: { 'Service-Worker': 'script' },\n\t})\n\t\t.then((response) => {\n\t\t\t// Ensure service worker exists, and that we really are getting a JS file.\n\t\t\tconst contentType = response.headers.get('content-type');\n\t\t\tif (\n\t\t\t\tresponse.status === 404 ||\n\t\t\t\t(contentType != null && contentType.indexOf('javascript') === -1)\n\t\t\t) {\n\t\t\t\t// No service worker found. Probably a different app. Reload the page.\n\t\t\t\tnavigator.serviceWorker.ready.then((registration) => {\n\t\t\t\t\tregistration.unregister().then(() => {\n\t\t\t\t\t\twindow.location.reload();\n\t\t\t\t\t});\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\t// Service worker found. Proceed as normal.\n\t\t\t\tregisterValidSW(swUrl, config);\n\t\t\t}\n\t\t})\n\t\t.catch(() => {\n\t\t\tconsole.log('No internet connection found. App is running in offline mode.');\n\t\t});\n}\n\nexport function unregister() {\n\tif ('serviceWorker' in navigator) {\n\t\tnavigator.serviceWorker.ready\n\t\t\t.then((registration) => {\n\t\t\t\tregistration.unregister();\n\t\t\t})\n\t\t\t.catch((error) => {\n\t\t\t\tconsole.error(error.message);\n\t\t\t});\n\t}\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n\nimport App from './App';\n\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}