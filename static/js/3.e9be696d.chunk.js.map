{"version":3,"sources":["../rust-wasm/pkg/rust_wasm_lib_bg.js","../rust-wasm/pkg/rust_wasm_lib.js"],"names":["cachedTextDecoder","TextDecoder","module","require","ignoreBOM","fatal","decode","cachegetUint8Memory0","getUint8Memory0","buffer","wasm","Uint8Array","getStringFromWasm0","ptr","len","subarray","heap","Array","fill","undefined","push","heap_next","length","addHeapObject","obj","idx","getObject","takeObject","ret","dropObject","init","cachegetInt32Memory0","getInt32Memory0","Int32Array","get_greeting","r0","r1","greet","WASM_VECTOR_LEN","cachedTextEncoder","TextEncoder","encodeString","encodeInto","arg","view","buf","encode","set","read","written","__wbindgen_string_new","arg0","arg1","__wbindgen_object_drop_ref","__wbg_new_59cb74e423758ede","Error","__wbg_stack_558ba5917b466edd","ptr0","malloc","realloc","mem","offset","code","charCodeAt","slice","passStringToWasm0","stack","len0","__wbg_error_4bb6c2a97407129a","console","error","__wbg_log_cc6b9ddc6ca5449d","log","__wbindgen_throw"],"mappings":"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","file":"static/js/3.e9be696d.chunk.js","sourcesContent":["import * as wasm from './rust_wasm_lib_bg.wasm';\n\nconst lTextDecoder = typeof TextDecoder === 'undefined' ? (0, module.require)('util').TextDecoder : TextDecoder;\n\nlet cachedTextDecoder = new lTextDecoder('utf-8', { ignoreBOM: true, fatal: true });\n\ncachedTextDecoder.decode();\n\nlet cachegetUint8Memory0 = null;\nfunction getUint8Memory0() {\n    if (cachegetUint8Memory0 === null || cachegetUint8Memory0.buffer !== wasm.memory.buffer) {\n        cachegetUint8Memory0 = new Uint8Array(wasm.memory.buffer);\n    }\n    return cachegetUint8Memory0;\n}\n\nfunction getStringFromWasm0(ptr, len) {\n    return cachedTextDecoder.decode(getUint8Memory0().subarray(ptr, ptr + len));\n}\n\nconst heap = new Array(32).fill(undefined);\n\nheap.push(undefined, null, true, false);\n\nlet heap_next = heap.length;\n\nfunction addHeapObject(obj) {\n    if (heap_next === heap.length) heap.push(heap.length + 1);\n    const idx = heap_next;\n    heap_next = heap[idx];\n\n    heap[idx] = obj;\n    return idx;\n}\n\nfunction getObject(idx) { return heap[idx]; }\n\nfunction dropObject(idx) {\n    if (idx < 36) return;\n    heap[idx] = heap_next;\n    heap_next = idx;\n}\n\nfunction takeObject(idx) {\n    const ret = getObject(idx);\n    dropObject(idx);\n    return ret;\n}\n/**\n*/\nexport function init() {\n    wasm.init();\n}\n\nlet cachegetInt32Memory0 = null;\nfunction getInt32Memory0() {\n    if (cachegetInt32Memory0 === null || cachegetInt32Memory0.buffer !== wasm.memory.buffer) {\n        cachegetInt32Memory0 = new Int32Array(wasm.memory.buffer);\n    }\n    return cachegetInt32Memory0;\n}\n/**\n* @returns {string}\n*/\nexport function get_greeting() {\n    try {\n        wasm.get_greeting(8);\n        var r0 = getInt32Memory0()[8 / 4 + 0];\n        var r1 = getInt32Memory0()[8 / 4 + 1];\n        return getStringFromWasm0(r0, r1);\n    } finally {\n        wasm.__wbindgen_free(r0, r1);\n    }\n}\n\n/**\n*/\nexport function greet() {\n    wasm.greet();\n}\n\nlet WASM_VECTOR_LEN = 0;\n\nconst lTextEncoder = typeof TextEncoder === 'undefined' ? (0, module.require)('util').TextEncoder : TextEncoder;\n\nlet cachedTextEncoder = new lTextEncoder('utf-8');\n\nconst encodeString = (typeof cachedTextEncoder.encodeInto === 'function'\n    ? function (arg, view) {\n    return cachedTextEncoder.encodeInto(arg, view);\n}\n    : function (arg, view) {\n    const buf = cachedTextEncoder.encode(arg);\n    view.set(buf);\n    return {\n        read: arg.length,\n        written: buf.length\n    };\n});\n\nfunction passStringToWasm0(arg, malloc, realloc) {\n\n    if (realloc === undefined) {\n        const buf = cachedTextEncoder.encode(arg);\n        const ptr = malloc(buf.length);\n        getUint8Memory0().subarray(ptr, ptr + buf.length).set(buf);\n        WASM_VECTOR_LEN = buf.length;\n        return ptr;\n    }\n\n    let len = arg.length;\n    let ptr = malloc(len);\n\n    const mem = getUint8Memory0();\n\n    let offset = 0;\n\n    for (; offset < len; offset++) {\n        const code = arg.charCodeAt(offset);\n        if (code > 0x7F) break;\n        mem[ptr + offset] = code;\n    }\n\n    if (offset !== len) {\n        if (offset !== 0) {\n            arg = arg.slice(offset);\n        }\n        ptr = realloc(ptr, len, len = offset + arg.length * 3);\n        const view = getUint8Memory0().subarray(ptr + offset, ptr + len);\n        const ret = encodeString(arg, view);\n\n        offset += ret.written;\n    }\n\n    WASM_VECTOR_LEN = offset;\n    return ptr;\n}\n\nexport const __wbindgen_string_new = function(arg0, arg1) {\n    var ret = getStringFromWasm0(arg0, arg1);\n    return addHeapObject(ret);\n};\n\nexport const __wbindgen_object_drop_ref = function(arg0) {\n    takeObject(arg0);\n};\n\nexport const __wbg_new_59cb74e423758ede = function() {\n    var ret = new Error();\n    return addHeapObject(ret);\n};\n\nexport const __wbg_stack_558ba5917b466edd = function(arg0, arg1) {\n    var ret = getObject(arg1).stack;\n    var ptr0 = passStringToWasm0(ret, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n    var len0 = WASM_VECTOR_LEN;\n    getInt32Memory0()[arg0 / 4 + 1] = len0;\n    getInt32Memory0()[arg0 / 4 + 0] = ptr0;\n};\n\nexport const __wbg_error_4bb6c2a97407129a = function(arg0, arg1) {\n    try {\n        console.error(getStringFromWasm0(arg0, arg1));\n    } finally {\n        wasm.__wbindgen_free(arg0, arg1);\n    }\n};\n\nexport const __wbg_log_cc6b9ddc6ca5449d = function(arg0) {\n    console.log(getObject(arg0));\n};\n\nexport const __wbindgen_throw = function(arg0, arg1) {\n    throw new Error(getStringFromWasm0(arg0, arg1));\n};\n\n","import * as wasm from \"./rust_wasm_lib_bg.wasm\";\nexport * from \"./rust_wasm_lib_bg.js\";"],"sourceRoot":""}